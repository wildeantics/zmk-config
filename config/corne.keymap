/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp W  &kp L  &kp R             &kp B           &kp Z           &kp SEMI     &kp Q        &kp U         &kp D  &kp J  &kp BSPC
&kp GRAVE   &kp S  &kp H  &kp N             &kp T           &kp COMMA       &kp DOT      &kp A        &kp E         &kp O  &kp I  &kp DELETE
&kp TAB     &kp F  &kp M  &kp V             &kp C           &kp FSLH        &kp G        &kp P        &kp X         &kp K  &kp Y  &kp K_CONTEXT_MENU
                          &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT    &lt 1 SPACE  &lt 2 ENTER  &kp LEFT_WIN
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5   &kp NUMBER_6    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9    &kp NUMBER_0  &kp MINUS         &kp EQUAL
&trans        &kp LC(C)     &kp LC(X)     &kp LC(V)     &kp LC(LS(V))  &trans          &trans        &kp LEFT      &kp UP_ARROW    &kp RIGHT     &kp LBKT          &kp RBKT
&trans        &trans        &kp LC(Z)     &kp LC(Y)     &kp LC(LS(Z))  &trans          &trans        &kt LEFT_GUI  &kp DOWN_ARROW  &trans        &kp SINGLE_QUOTE  &kp BACKSLASH
                                          &trans        &trans         &trans          &trans        &trans        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1       &kp F2            &kp F3      &kp F4   &kp F5   &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&kp C_PREV   &kp C_PLAY_PAUSE  &kp C_NEXT  &trans   &trans   &trans    &trans  &trans  &trans  &trans   &trans   &trans
&kp PAGE_UP  &kp PAGE_DOWN     &kp HOME    &kp END  &kp INS  &trans    &trans  &trans  &trans  &trans   &trans   &trans
                                           &trans   &trans   &trans    &trans  &trans  &trans
            >;
        };

        bonus_layer {
            bindings = <
&trans      &trans      &trans      &trans  &trans  &trans    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_DIVIDE    &kp KP_MULTIPLY  &trans
&trans      &trans      &trans      &trans  &trans  &trans    &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_SUBTRACT  &kp KP_PLUS      &trans
&bt BT_PRV  &bt BT_NXT  &bt BT_CLR  &trans  &trans  &trans    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_0  &kp KP_DOT       &trans
                                    &trans  &trans  &trans    &trans           &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bonus_layer_cond {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
